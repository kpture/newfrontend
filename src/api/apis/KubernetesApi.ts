/* tslint:disable */
/* eslint-disable */
/**
 * Kpture-backend
 * Kpture Backend server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: kpture.git@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CaptureKpture,
    CaptureKptureFromJSON,
    CaptureKptureToJSON,
    ServerKptureNamespaceRequest,
    ServerKptureNamespaceRequestFromJSON,
    ServerKptureNamespaceRequestToJSON,
    ServerServerError,
    ServerServerErrorFromJSON,
    ServerServerErrorToJSON,
} from '../models';

export interface ApiV1KptureK8sNamespacePostRequest {
    data: ServerKptureNamespaceRequest;
}

/**
 * 
 */
export class KubernetesApi extends runtime.BaseAPI {

    /**
     * Start namespace kpture
     * Start namespace kpture
     */
    async apiV1KptureK8sNamespacePostRaw(requestParameters: ApiV1KptureK8sNamespacePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CaptureKpture>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiV1KptureK8sNamespacePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/kpture/k8s/namespace`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServerKptureNamespaceRequestToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptureKptureFromJSON(jsonValue));
    }

    /**
     * Start namespace kpture
     * Start namespace kpture
     */
    async apiV1KptureK8sNamespacePost(requestParameters: ApiV1KptureK8sNamespacePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CaptureKpture> {
        const response = await this.apiV1KptureK8sNamespacePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get enabled kubernetes namespaces
     * Get enabled kubernetes namespaces
     */
    async apiV1KptureK8sNamespacesGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/kpture/k8s/namespaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get enabled kubernetes namespaces
     * Get enabled kubernetes namespaces
     */
    async apiV1KptureK8sNamespacesGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<string>> {
        const response = await this.apiV1KptureK8sNamespacesGetRaw(initOverrides);
        return await response.value();
    }

}

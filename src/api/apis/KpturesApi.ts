/* tslint:disable */
/* eslint-disable */
/**
 * Kpture-backend
 * Kpture Backend server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: kpture.git@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CaptureKpture,
    CaptureKptureFromJSON,
    CaptureKptureToJSON,
    ServerKptureRequest,
    ServerKptureRequestFromJSON,
    ServerKptureRequestToJSON,
    ServerServerError,
    ServerServerErrorFromJSON,
    ServerServerErrorToJSON,
} from '../models';

export interface KpturePostRequest {
    data: ServerKptureRequest;
}

export interface KptureUuidDeleteRequest {
    uuid: string;
}

export interface KptureUuidDownloadGetRequest {
    uuid: string;
}

export interface KptureUuidGetRequest {
    uuid: string;
}

export interface KptureUuidStopPutRequest {
    uuid: string;
}

/**
 * 
 */
export class KpturesApi extends runtime.BaseAPI {

    /**
     * Start Kpture
     * Start Kpture
     */
    async kpturePostRaw(requestParameters: KpturePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CaptureKpture>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling kpturePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kpture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServerKptureRequestToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptureKptureFromJSON(jsonValue));
    }

    /**
     * Start Kpture
     * Start Kpture
     */
    async kpturePost(requestParameters: KpturePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CaptureKpture> {
        const response = await this.kpturePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete kapture
     * Delete kapture
     */
    async kptureUuidDeleteRaw(requestParameters: KptureUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling kptureUuidDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kpture/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete kapture
     * Delete kapture
     */
    async kptureUuidDelete(requestParameters: KptureUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.kptureUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download kpture
     * Download kpture
     */
    async kptureUuidDownloadGetRaw(requestParameters: KptureUuidDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling kptureUuidDownloadGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kpture/{uuid}/download`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download kpture
     * Download kpture
     */
    async kptureUuidDownloadGet(requestParameters: KptureUuidDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.kptureUuidDownloadGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get kapture
     * Get kapture
     */
    async kptureUuidGetRaw(requestParameters: KptureUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CaptureKpture>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling kptureUuidGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kpture/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptureKptureFromJSON(jsonValue));
    }

    /**
     * Get kapture
     * Get kapture
     */
    async kptureUuidGet(requestParameters: KptureUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CaptureKpture> {
        const response = await this.kptureUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop Kpture
     * Stop Kpture
     */
    async kptureUuidStopPutRaw(requestParameters: KptureUuidStopPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CaptureKpture>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling kptureUuidStopPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kpture/{uuid}/stop`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptureKptureFromJSON(jsonValue));
    }

    /**
     * Stop Kpture
     * Stop Kpture
     */
    async kptureUuidStopPut(requestParameters: KptureUuidStopPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CaptureKpture> {
        const response = await this.kptureUuidStopPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get kaptures
     * Get kaptures
     */
    async kpturesGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<{ [key: string]: CaptureKpture; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kptures`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, CaptureKptureFromJSON));
    }

    /**
     * Get kaptures
     * Get kaptures
     */
    async kpturesGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<{ [key: string]: CaptureKpture; }> {
        const response = await this.kpturesGetRaw(initOverrides);
        return await response.value();
    }

}
